{
    "Task": {
      "description": "Launch a new agent that has access to the following tools: Bash, Glob, Grep, LS, Read, Edit, MultiEdit, Write, NotebookRead, NotebookEdit, WebFetch, TodoRead, TodoWrite, WebSearch. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries, use the Agent tool to perform the search for you.\n\nWhen to use the Agent tool:\n- If you are searching for a keyword like \"config\" or \"logger\", or for questions like \"which file does X?\", the Agent tool is strongly recommended\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "description": "A short (3-5 word) description of the task",
            "type": "string"
          },
          "prompt": {
            "description": "The task for the agent to perform",
            "type": "string"
          }
        },
        "required": ["description", "prompt"],
        "type": "object"
      }
    },
    "Bash": {
      "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n  - If you _still_ need to run `grep`, the system will automatically detect and use the optimal search command: `rg` (ripgrep) if available, or fall back to `grep`. The system automatically attempts to install ripgrep on first run for better performance and user experience.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n   - Run a git status command to see all untracked files.\n   - Run a git diff command to see both staged and unstaged changes that will be committed.\n   - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message. Wrap your analysis process in <commit_analysis> tags:\n\n<commit_analysis>\n- List the files that have been changed or added\n- Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.)\n- Brainstorm the purpose or motivation behind these changes\n- Assess the impact of these changes on the overall project\n- Check for any sensitive information that shouldn't be committed\n- Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n- Ensure your language is clear, concise, and to the point\n- Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.)\n- Ensure the message is not generic (avoid words like \"Update\" or \"Fix\" without context)\n- Review the draft message to ensure it accurately reflects the changes and their purpose\n\n\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n     Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude \n   - Run git status to make sure the commit succeeded.\n\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- Use the git context at the start of this conversation to determine which files are relevant to your commit. Be careful not to stage and commit files (e.g. with `git add .`) that aren't relevant to your commit.\n- NEVER update the git config\n- DO NOT run additional commands to read or explore code, beyond what is available in the git context\n- DO NOT push to the remote repository\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- Ensure your commit message is meaningful and concise. It should explain the purpose of the changes, not just describe them.\n- Return an empty response - the user will see the git output directly\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n     Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude \n   EOF\n   )\"\n\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git logcommand and `git diff main...HEAD` to understand the full commit historyfor the current branch (from the time it diverged from the `main` branch)\n\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary. Wrap your analysis process in <pr_analysis> tags:\n\n<pr_analysis>\n- List the commits since diverging from the main branch\n- Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.)\n- Brainstorm the purpose or motivation behind these changes\n- Assess the impact of these changes on the overall project\n- Do not use tools to explore code, beyond what is available in the git context\n- Check for any sensitive information that shouldn't be committed\n- Draft a concise (1-2 bullet points) pull request summary that focuses on the \"why\" rather than the \"what\"\n- Ensure the summary accurately reflects all changes since diverging from the main branch\n- Ensure your language is clear, concise, and to the point\n- Ensure the summary accurately reflects the changes and their purpose (ie. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.)\n- Ensure the summary is not generic (avoid words like \"Update\" or \"Fix\" without context)\n- Review the draft summary to ensure it accurately reflects the changes and their purpose\n</pr_analysis>\n\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n  Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n\n\nImportant:\n- NEVER update the git config\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "command": {
            "description": "The command to execute",
            "type": "string"
          },
          "description": {
            "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'",
            "type": "string"
          },
          "timeout": {
            "description": "Optional timeoutin milliseconds (max 600000)",
            "type": "number"
          }
        },
        "required": ["command"],
        "type": "object"
      }
    },
    "Glob": {
      "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "path": {
            "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided.",
            "type": "string"
          },
          "pattern": {
            "description": "The glob pattern to match files against",
            "type": "string"
          }
        },
        "required": ["pattern"],
        "type": "object"
      }
    },
    "Grep": {
      "description": "\n- Fast content search tool that works with any codebase size\n- Searches file contents using regular expressions\n- Supports full regex syntax (eg. \"log.*Error\", \"function\\s+\\w+\", etc.)\n- Filter files by pattern with the include parameter (eg. \"*.js\", \"*.{ts,tsx}\")\n- Returns file paths with at least one match sorted by modification time\n- Use this tool when you need to find files containing specific patterns\n- If you need to identify/count the number of matches within files, use the Bash tool with `rg` (ripgrep) directly. Do NOT use `grep`.\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "include": {
            "description": "File pattern to include in the search (e.g. \"*.js\", \"*.{ts,tsx}\")",
            "type": "string"
          },
          "path": {
            "description": "The directory to search in. Defaults to the current working directory.",
            "type": "string"
          },
          "pattern": {
            "description": "The regular expression pattern to search forin file contents",
            "type": "string"
          }
        },
        "required": ["pattern"],
        "type": "object"
      }
    },
    "LS": {
      "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "ignore": {
            "description": "List of glob patterns to ignore",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "path": {
            "description": "The absolute path to the directory to list (must be absolute, not relative)",
            "type": "string"
          }
        },
        "required": ["path"],
        "type": "object"
      }
    },
    "Read": {
      "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful. \n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "file_path": {
            "description": "The absolute path to the file to read",
            "type": "string"
          },
          "limit": {
            "description": "The number of lines to read. Only provide if the file is too large to read at once.",
            "type": "number"
          },
          "offset": {
            "description": "The line number to start reading from. Only provide if the file is too large to read at once",
            "type": "number"
          }
        },
        "required": ["file_path"],
        "type": "object"
      }
    },
    "Edit": {
      "description": "Performs exact string replacements in files with enhanced safety checks and validation.\n\nUsage:\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Automatically cleans line number prefixes from Read tool output\n- Validates Read tool usage history for existing files\n- Creates automatic backups for large files or extensive replacements\n- Provides detailed execution logging and performance monitoring",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "expected_replacements": {
            "default": 1,
            "description": "The expected number of replacements to perform. Defaults to 1 if not specified. Ignored when replace_all=true.",
            "type": "number"
          },
          "file_path": {
            "description": "The absolute path to the file to modify",
            "type": "string"
          },
          "new_string": {
            "description": "The text to replace it with (must be different from old_string)",
            "type": "string"
          },
          "old_string": {
            "description": "The text to replace",
            "type": "string"
          },
          "replace_all": {
            "default": false,
            "description": "Replace all occurrences of old_string (default false). When true, replaces all matches regardless of expected_replacements.",
            "type": "boolean"
          }
        },
        "required": ["file_path", "old_string", "new_string"],
        "type": "object"
      }
    },
    "MultiEdit": {
      "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - expected_replacements: The number of replacements you expect to make. Defaults to 1 if not specified.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string matches multiple locations and edits.expected_replacements isn't specified\n- The tool will fail if the number of matches doesn't equal edits.expected_replacements when it's specified\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "edits": {
            "description": "Array of edit operations to perform sequentially on the file",
            "items": {
              "additionalProperties": false,
              "properties": {
                "expected_replacements": {
                  "default": 1,
                  "description": "The expected number of replacements to perform. Defaults to 1 if not specified.",
                  "type": "number"
                },
                "new_string": {
                  "description": "The text to replace it with",
                  "type": "string"
                },
                "old_string": {
                  "description": "The text to replace",
                  "type": "string"
                }
              },
              "required": ["old_string", "new_string"],
              "type": "object"
            },
            "minItems": 1,
            "type": "array"
          },
          "file_path": {
            "description": "The absolute path to the file to modify",
            "type": "string"
          }
        },
        "required": ["file_path", "edits"],
        "type": "object"
      }
    },
    "Write": {
      "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.",
      "parameters": {       
        "additionalProperties": false,
        "properties": {
          "content": {
            "description": "The content to write to the file",
            "type": "string"
          },
          "file_path": {
            "description": "The absolute path to the file to write (must be absolute, not relative)",
            "type": "string"
          }
        },
        "required": ["file_path", "content"],
        "type": "object"
      }
    },
    "NotebookRead": {
      "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "notebook_path": {
            "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)",
            "type": "string"
          }
        },
        "required": ["notebook_path"],
        "type": "object"
      }
    },
    "NotebookEdit": {
      "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "cell_number": {
            "description": "The index of the cell to edit (0-based)",
            "type": "number"
          },
          "cell_type": {
            "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required.",
            "enum": ["code", "markdown"],
            "type": "string"
          },
          "edit_mode": {
            "description": "The type of edit to make (replace, insert, delete). Defaults to replace.",
            "enum": ["replace", "insert", "delete"],
            "type": "string"
          },
          "new_source": {
            "description": "The new source for the cell",
            "type": "string"
          },
          "notebook_path": {
            "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)",
            "type": "string"
          }
        },
        "required": ["notebook_path", "cell_number", "new_source"],
        "type": "object"
      }
    },
    "WebFetch": {
      "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "prompt": {
            "description": "The prompt to run on the fetched content",
            "type": "string"
          },
          "url": {
            "description": "The URL to fetch content from",
            "format": "uri",
            "type": "string"
          }
        },
        "required": ["url", "prompt"],
        "type": "object"
      }
    },
    "TodoRead": {
      "description": "Use this tool to read the current to-do list for the session. This tool should be used proactively and frequently to ensure that you are aware of\nthe status of the current task list. You should make use of this tool as often as possible, especially in the following situations:\n- At the beginning of conversations to see what's pending\n- Before starting new tasks to prioritize work\n- When the user asks about previous tasks or plans\n- Whenever you're uncertain about what to do next\n- After completing tasks to update your understanding of remaining work\n- After every few messages to ensure you're on track\n\nUsage:\n- This tool takes in no parameters. So leave the input blank or empty. DO NOT include a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.\n- Returns a list of todo items with their status, priority, and content\n- Use this information to track progress and plan next steps\n- If no todos exist yet, an empty list will be returned",
      "parameters": {       
        "additionalProperties": false,
        "description": "No input is required, leave this field blank. NOTE that we do not require a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.",
        "properties": {},
        "type": "object"
      }
    },
    "TodoWrite": {
      "description": "Create/overwrite the todo list. Pass a single string parameter 'request' containing JSON. Supported formats: (1) {\"todos\":[{\"id\":\"1\",\"content\":\"...\",\"status\":\"pending\",\"priority\":\"medium\"}]} (2) direct array: [{...}]. Plain text lines like '1. task' are also accepted and will be converted with defaults.",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "request": {
            "description": "JSON string with todos array, or plain numbered lines (one per todo)",
            "type": "string"
          }
        },
        "required": ["request"],
        "type": "object"
      }
    },
    "WebSearch": {
      "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n",
      "parameters": {
        "additionalProperties": false,
        "properties": {
          "allowed_domains": {
            "description": "Only include search results from these domains",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "blocked_domains": {
            "description": "Never include search results from these domains",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "query": {
            "description": "The search query to use",
            "minLength": 2,
            "type": "string"
          }
        },
        "required": ["query"],
        "type": "object"
      }
    }
  }